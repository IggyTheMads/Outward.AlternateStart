using SideLoader;
using SideLoader.Managers;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;

namespace AlternateStart.StartScenarios
{
    public abstract class Scenario
    {
        // Our scenario classes will override these properties with the actual data

        /// <summary>Unique ID of this scenario. This value will be used as the quest ID.</summary>
        public abstract ScenarioQuest Type { get; }

        /// <summary>Difficulty of the scenario</summary>
        public abstract ScenarioType Difficulty { get; }

        /// <summary>[CURRENTLY UNUSED] Theme of the scenario</summary>
        [Obsolete("Not yet implemented.")]
        public virtual ScenarioTheme Theme { get; }

        /// <summary>Region which the scenario takes place</summary>
        public abstract ScenarioPassives Passive { get; }

        /// <summary>The starting scene players will spawn in</summary>
        public abstract AreaManager.AreaEnum SpawnScene { get; }

        /// <summary>Optional position to spawn at, or just use "default"</summary>
        public abstract Vector3 SpawnPosition { get; }

        /// <summary>Optional rotation for players to spawn with, if custom position is set</summary>
        public virtual Vector3 SpawnRotation => Quaternion.identity.eulerAngles;

        public virtual void Gear(Character character)
        {

        }

        public virtual void OnStartDestiny()
        {
            Debug.Log("OnStartDestiny");
            GearManager.StartingGear();
        }

        /// <summary>Does this Scenario have a custom quest associated with it?</summary>
        public abstract bool HasQuest { get; }

        /// <summary>If HasQuest is true, this will be the SL_Quest generated by the Scenario class.</summary>
        public SL_Quest QuestTemplate { get; private set; }

        /// <summary>If HasQuest is true, this will be used as the name of the Quest.</summary>
        public virtual string QuestName { get; }

        /// <summary>If HasQuest is true, these will be used as the log entries for the Quest. Key is the UID, Value is the Text.</summary>
        public virtual Dictionary<string, string> QuestLogSignatures { get; }

        /// <summary>Automatically generated QuestEvent for the base Scenario itself (to know which Scenario the player chose).</summary>
        public QuestEventSignature QE_ScenarioQuestEvent { get; private set; }

        /// <summary>Automatically generated UID for <see cref="QE_ScenarioQuestEvent"/>.</summary>
        public string QE_Scenario_UID => $"iggythemad.scenarios.{this.GetType().Name}";

        /// <summary>Was this Scenario chosen by the host character?</summary>
        public bool IsActiveScenario => QuestEventManager.Instance.HasQuestEvent(QE_ScenarioQuestEvent);
        
        // Abstract methods (must override)

        /// <summary>
        /// Called when we spawn into our SpawnScene.
        /// </summary>
        public abstract void OnStartSpawn();

        /// <summary>
        /// If HasQuest is true, use this to update our Quest log progress.
        /// </summary>
        public abstract void UpdateQuestProgress(Quest quest);

        // Virtual methods (optional override)

        /// <summary>
        /// Called during the Awake of our Plugin, use this to set up the Scenario's quest events and things like that.
        /// </summary>
        public virtual void Init()
        {
            SL.OnPacksLoaded += OnPacksLoaded;

            QE_ScenarioQuestEvent = CustomQuests.CreateQuestEvent(QE_Scenario_UID, false, false, true, Plugin.QUEST_EVENT_FAMILY_NAME);
        }

        /// <summary>
        /// Called at SL.OnPacksLoaded.
        /// </summary>
        public virtual void OnPacksLoaded()
        {
            if (HasQuest)
                PrepareSLQuest();
        }

        /// <summary>
        /// Called as soon as the player picks this scenario in the In Between.
        /// </summary>
        public virtual void OnScenarioChosen()
        {
            // Setup starting items etc
            foreach (string uid in CharacterManager.Instance.PlayerCharacters.Values)
            {
                Character character = CharacterManager.Instance.GetCharacter(uid);
                OnScenarioChosen(character);
            }
        }

        /// <summary>
        /// Called for each player character at OnScenarioChosen.
        /// </summary>
        public virtual void OnScenarioChosen(Character character)
        {
        }

        /// <summary>
        /// Called after we load the SpawnScene for each character.
        /// </summary>
        public virtual void OnStartSpawn(Character character)
        {
        }

        // Concrete methods (cannot override)

        public IEnumerator StartScenario()
        {
            // Give the host the DESTINY CHOSEN quest event
            QuestEventManager.Instance.AddEvent(ScenarioManager.QE_DestinyChosen);

            QuestEventManager.Instance.AddEvent(QE_ScenarioQuestEvent);

            OnScenarioChosen();

            // Autoknock the players
            foreach (string uid in CharacterManager.Instance.PlayerCharacters.Values)
            {
                Character character = CharacterManager.Instance.GetCharacter(uid);
                character.AutoKnock(true, Vector3.back, character);

                OnScenarioChosen(character);
            }

            //ScenarioManager.SetFullStop(false);

            yield return new WaitForSeconds(1f);

            // Teleport to start area
            Character host = CharacterManager.Instance.GetWorldHostCharacter();
            if (host = CharacterManager.Instance.GetFirstLocalCharacter())
            {
                NetworkLevelLoader.Instance.RequestSwitchArea(AreaManager.Instance.GetArea(this.SpawnScene).SceneName, 0, 1.5f);
            }

            SL.OnGameplayResumedAfterLoading += OnGameplayResumedAfterScenarioStart;
        }

        private void OnGameplayResumedAfterScenarioStart()
        {
            // Teleport players to spawn position
            foreach (string uid in CharacterManager.Instance.PlayerCharacters.Values)
            {
                Character character = CharacterManager.Instance.GetCharacter(uid);

                if (SpawnPosition != default)
                    character.Teleport(SpawnPosition, SpawnRotation);

                character.SpellCastProcess((int)Character.SpellCastType.GetUpBelly, (int)Character.SpellCastModifier.Immobilized, 0, 0);

                OnStartSpawn(character);
            }

            OnStartSpawn();
            OnStartDestiny();

            SL.OnGameplayResumedAfterLoading -= OnGameplayResumedAfterScenarioStart;
        }

        private void PrepareSLQuest()
        {
            QuestTemplate = new()
            {
                Target_ItemID = 7011620,
                New_ItemID = (int)this.Type,
                Name = QuestName,
                IsSideQuest = false,
                ItemExtensions = new SL_ItemExtension[] { new SL_QuestProgress() },
            };

            List<SL_QuestLogEntrySignature> list = new();
            foreach (KeyValuePair<string, string> sig in this.QuestLogSignatures)
            {
                list.Add(new SL_QuestLogEntrySignature()
                {
                    UID = sig.Key,
                    Text = sig.Value,
                    Type = QuestLogEntrySignatureType.Static,
                });
            }

            SL_QuestProgress progress = QuestTemplate.ItemExtensions[0] as SL_QuestProgress;
            progress.LogSignatures = list.ToArray();

            QuestTemplate.ApplyTemplate();

            QuestTemplate.OnQuestLoaded += UpdateQuestProgress;
        }

        /// <summary>
        /// If the host character has our quest this returns their instance of the quest, otherwise it gives it to them first.
        /// </summary>
        public Quest GetOrGiveQuestToHost()
        {
            Character character = CharacterManager.Instance.GetWorldHostCharacter();

            if (character.Inventory.QuestKnowledge.IsItemLearned((int)this.Type))
                return character.Inventory.QuestKnowledge.GetItemFromItemID((int)this.Type) as Quest;

            Quest quest = ItemManager.Instance.GenerateItemNetwork((int)this.Type) as Quest;
            quest.transform.SetParent(character.Inventory.QuestKnowledge.transform);
            character.Inventory.QuestKnowledge.AddItem(quest);

            QuestProgress progress = quest.GetComponent<QuestProgress>();
            progress.m_progressState = QuestProgress.ProgressState.InProgress;

            UpdateQuestProgress(quest);

            return quest;
        }

        /// <summary>
        /// Show a UI Notification message.
        /// </summary>
        public void ShowUIMessage(string message, bool instant = false)
        {
            if (CharacterManager.Instance == null || string.IsNullOrEmpty(message))
                return;


            Plugin.Instance.StartCoroutine(UIMessageCo(message, instant));
        }

        IEnumerator UIMessageCo(string message, bool instant)
        {
            Character player = CharacterManager.Instance.GetFirstLocalCharacter();
            if (player)
            {
                if(!instant) { yield return new WaitForSeconds(2f); }
                
                player.CharacterUI.NotificationPanel.ShowNotification(message, 4f);
            }
        }
    }
}
